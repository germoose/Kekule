Directions: 

Thing to do as of 7/22/2013

IMPORTANT:
- write paper
	- results / discussion
		- rank 6 test
		- talk to alida
		- more editing
- optimize flooding algorithm
	- could count number of cycles perhaps
		- do it one at a time until you have all the cycles
		- could break if it had really big cycle
- how to highlight
- get openeye scientific software

NOT IMPORTANT: 
-Fix error when image rendered gets an empty list
-Make a method to have a bitvector edge remove one of it's nodes
- makea method for bitvector addition and subtraction ^^
-Turn cell into an arraylist instead of an array
- make an edge cell and a kekule cell
- use appendName() method
- still getting overflow errors
- remove 8 / 10 cycles?
- extendPOrts/extendPotrsNoCell should be one method, along with other
- trim disjoint() is useful?
- planar, is useful?
- thousands and thousands of TODOs


We would start with confirming his findings first, and then explore further to study
 chemically relevant properties in the simpler model when restricted up to 4 degrees.
 If we need help on theoretical side, we can always contact Wim, he will be happy to 
collaborate with us if we find some interesting aspects. He is an established scientist,
 any opportunity to collaborate with him would be wonderful

(1) Discover chemistry relevant solutions to Hesselink's Paper

"For application to carbon chemestry, it would be interesting to see whether all Kekule cells of Section 5.3
can be realized in stable molecules" 2013 pp.119

	Step 1. Become familiar with Hesselink's software
		- test throughly on linux computers
	
	Step 2. Create our own software in Java
		- first test results compared to Hesselink's software to ensure correctness
		- perhaps provide graphical interface
		- add our changes
			- Restrict number of bonds to 4

			"In view of the application to conjugation in carbon chemistry, we could restrict attention to graphs where all nodes
			have degree <= 4" Hesselink 2007 pp.5

			- Carbon bonds to 4 things, or 3 things with one double bond, Since all non-port nodes much have a double bond,
all non-port nodes can only bond to 3 things in the graphs

			- what about the ports?

				- ports are allowed to not have double bonds, but have to have the capacity to have the double bond. Additionally,
in order or electricy to flow, the port must be on an alternating path, which won't exist if the port doesn't have a double bond somewhere,
therefore all nodes should be restricted to 3 bonds
					
					- however, ports are places which connect molecule to outside world, is this 'connection' through bonds, 
because if it, then ports should be restricted to 2 bonds

	Step 3. Evaluate Results
		- not all results will be findable
			- original paper has 4 which it hasn't even found any structure for
			- expand search space
				- high performance computing lab?

		- not all results will be possible
			- for example, triangles are not very stable in carbon chemistry
			- also graph may not be connected, which is impossible in molecule, perhaps add constraint that results must be connected
			- find some example compounds to back up our claims that certain molecules are stable

		- ensure molecules are stable in presence of electricity
			- some reactions take place with electricity, for example split water into oxygen and hydrogen (Electrolysis)

		- can use techniques previously found to edit graph without changing Kekule cell
			- bending and transforming
			- can we make a program which does this for us, by hand is quite difficult?
			- perhaps it is easier, to find the not - allowed solution, and alter it to a carbon chemistry approved structure?
			- border channel edges can be added without changing the Kekule cell

Possibly make java version of Hesselink's software

Either way, provide nice GUI Interface
Possible to use Jmol to display things....

-------------------------------------
In our graph theoretical abstraction, we neglect
all hydrogen atoms.

In our application to graph theory, numerical invariants and the symmetry of the graphs play no roles yet.

In view of
the application to conjugation in carbon chemistry, we could restrict attention
to graphs where all nodes have degrees <= 4. Since we have no use for this
restriction, we do this only in some examples.

We do not know whether the class KC of the Kekulé cells is decidable [4] and [8], 
i.e., whether one can make a computer program that reads (an encoding of) a cell K from its 
input and then computes whether or not K is a Kekulé cell. It is easy to make a computer program 
that enumerates all graphs, and verifies for each of them whether it has K as its Kekulé cell.
This program, however, would not terminate if K is not a Kekulé cell. 
The program therefore only shows that the class KC is semi-decidable.

In order 6, we found 214 classes of linkable cells. Of these, 210 are Kekulé cells while for 4 
of the classes this is presently unknown.

In each case, the graph presented is the first one found by our computer program. We made no effort to 
find graphs that fit the requirements of carbon chemistry. Recall from [7] and [12] that there are rather 
far-reaching methods to transform a graph without changing the Kekulé cell. It is beyond the scope of this 
paper to search for graphs that correspond to stable molecules of alternating hydrocarbons.

For application to carbon chemistry, it would be interesting to see whether all Kekulé cells of Section 5.3 
can be realized in stable molecules.